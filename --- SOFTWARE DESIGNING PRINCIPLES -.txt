                                                    --- SOFTWARE DESIGNING PRINCIPLES ---

->> "Don't repeat yourself" (DRY) is a principle of software development aimed at reducing repetition of information which is likely to change ,replacing it with abstractions that are less likely to change, or using data normalization which avoids redundancy in the first place.

The DRY principle is stated as "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system".
An important goal of the DRY principle is to improve the maintainability of code during all phases of its lifecycle. When the DRY principle is followed, for example, a software developer should be able to change code in one place, and have the change automatically applied to every instance of the code in question.

The advantages of the DRY principle include the following:
> It makes the codebase easier to maintain since if we wanted to change the logic or add to it, we’d only need to change it in one place instead of multiple locations where the logic appears.
> It makes the code easier to read because there’ll be less redundancy in the code.  


--> The Hollywood Principle states, "Don't Call Us, We'll Call You." It's closely related to the Dependency Inversion Principle, and illustrates a different way of writing software from the more traditional form of programming in which one's own code dictates the flow of control.  When following the Hollywood Principle, code is written to respond to external events, such as from an existing framework.

The Hollywood Principle is closely related to the Dependency Inversion (DI) Principle, and it represents a different approach to building software, as compared to the more traditional form of programming, where one’s own code drives control flow. When this approach is followed, code is developed to respond to external events, such as those generated by an existing framework.

This principle is frequently used in the design of application plug-ins and extension models. These models provide events and other “hooks” (callbacks) that the plug-in modules will use. 

The Observer Design Pattern is a well-known pattern that follows the Hollywood Principle. This pattern allows for a well-defined and unobtrusive observation of an object’s status. 


->> SOLID is an acronym that stands for five key design principles: single responsibility principle, open-closed principle, Liskov substitution principle, interface segregation principle, and dependency inversion principle. 

> Single Responsibility Principle:  Following this principle means that each class only does one thing and every class or module only has responsibility for one part of the software’s functionality. More simply, each class should solve only one problem.
Single responsibility principle is a relatively basic principle that most developers are already utilizing to build code. It can be applied to classes, software components, and microservices.
Utilizing this principle makes code easier to test and maintain, it makes software easier to implement.

> Open-Closed Principle: “You should be able to extend a class’s behavior without modifying it.”
Following this principle is essential for writing code that is easy to maintain and revise. Your class complies with this principle if it is:
 Open for extension, meaning that the class’s behavior can be extended; and
 Closed for modification, meaning that the source code is set and cannot be changed.

> Liskov Substitution Principle: This principle simply requires that every derived class should be substitutable for its parent class.
While this can be a difficult principle to internalize, in a lot of ways it’s simply an extension of open-closed principle, as it’s a way of ensuring that derived classes extend the base class without changing behavior.
Following this principle helps to avoid unexpected consequences of changes and avoids having to open a closed class in order to make changes. It leads to easy extensions of software

> Interface Segregation Principle: The general idea of interface segregation principle is that it’s better to have a lot of smaller interfaces than a few bigger ones.According to this principle,one should work to have many client-specific interfaces, avoiding the temptation of having one big, general-purpose interface.

> Dependency Inversion Principle: Simply put, dependency inversion principle means that developers should “depend on abstractions, not on concretions.High level modules should not depend upon low level modules. Both should depend on abstractions.” Further, “abstractions should not depend on details. Details should depend upon abstractions.”
One popular way to comply with this principle is through the use of a dependency inversion pattern, although this method is not the only way to do so. Whatever method you choose to utilize, finding a way to utilize this principle will make your code more flexible, agile, and reusable.

